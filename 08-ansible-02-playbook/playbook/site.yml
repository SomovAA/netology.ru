---
- name: Install Vector # Наименование play-я
  hosts: vector # На каких хостах выполнять
  tasks: # Список задач
    - name: Create a directory # Наименование задачи
      ansible.builtin.file: # Использую модуль file для создания директории с необходимыми правами
        path: "{{ vector_dir }}" # Путь до директории, параметры лежат в group_vars/vector/vars.yml
        state: directory # Указываю тип
        mode: '0755' # Указываю права
      check_mode: false
      tags: # Тэги
        - vector # Название тега
    - name: Download # Наименование задачи
      ansible.builtin.get_url: # Использую модуль get_url для скачивания установочного файла
        url: "https://packages.timber.io/vector/0.27.0/vector-0.27.0-1.{{ vector_arch }}.rpm" # Откуда скачиваю
        dest: "{{ vector_dir }}/vector-0.27.0-1.{{ vector_arch }}.rpm" # Куда складываю локально
      check_mode: false
      tags: # Тэги
        - vector # Название тега
    - name: Install package # Наименование задачи
      become: true # Повышаем привилегию для задачи
      ansible.builtin.yum: # Использую модуль yum, менеджер пакетов
        name:
          - "{{ vector_dir }}/vector-0.27.0-1.{{ vector_arch }}.rpm" # Устанавливаю Vector из скаченного ранее файла
      tags: # Тэги
        - vector # Название тега
    - name: Start vector service # Наименование задачи
      become: true # Повышаем привилегию для задачи
      ansible.builtin.systemd: # Использую модуль systemd для запуска сервиса vector
        name: vector # Имя сервиса
        state: started # Запуск сервиса
        daemon_reload: true # Перезагрузка конфигурации диспетчера systemd, иначе он не увидит сервиса vector
      check_mode: false
      ignore_errors: "{{ ansible_check_mode }}" # модуль systemd не обращает внимания на check_mode, есть специальная переменная ansible_check_mode, решающая проблему
      tags: # Тэги
        - vector # Название тега
- name: Install Clickhouse # Наименование play-я
  hosts: clickhouse # На каких хостах выполнять
  tasks: # Список задач
    - block: # Используем конструкцию block для группировки задач
        - name: Get clickhouse distrib # Наименование задачи
          ansible.builtin.get_url: # Использую модуль get_url для скачивания установочного файла
            url: "https://packages.clickhouse.com/rpm/stable/{{ item }}-{{ clickhouse_version }}.noarch.rpm"
            dest: "./{{ item }}-{{ clickhouse_version }}.rpm"
          with_items: "{{ clickhouse_packages }}"
          check_mode: false
      rescue: # Если одна из задач выше провалилась, то выполняется эта конструкция
        - name: Get clickhouse distrib # Наименование задачи
          ansible.builtin.get_url: # Использую модуль get_url для скачивания установочного файла
            url: "https://packages.clickhouse.com/rpm/stable/clickhouse-common-static-{{ clickhouse_version }}.x86_64.rpm"
            dest: "./clickhouse-common-static-{{ clickhouse_version }}.rpm"
          check_mode: false
      tags: # Тэги
        - clickhouse # Название тега
    - name: Install clickhouse packages # Наименование задачи
      become: true # Повышаем привилегию для задачи
      ansible.builtin.yum: # Использую модуль yum, менеджер пакетов
        name:
          - clickhouse-common-static-{{ clickhouse_version }}.rpm
          - clickhouse-client-{{ clickhouse_version }}.rpm
          - clickhouse-server-{{ clickhouse_version }}.rpm
      tags: # Тэги
        - clickhouse # Название тега
    - name: Start clickhouse service # Наименование задачи
      become: true # Повышаем привилегию для задачи
      ansible.builtin.systemd: # Использую модуль systemd для запуска сервиса clickhouse-server
        name: clickhouse-server # Имя сервиса
        state: started # Запуск сервиса
        daemon_reload: true # Перезагрузка конфигурации диспетчера systemd, иначе он не увидит сервиса clickhouse-server
      check_mode: false
      ignore_errors: "{{ ansible_check_mode }}"
      tags: # Тэги
        - clickhouse # Название тега
    - name: Create database # Наименование задачи
      ansible.builtin.command: "clickhouse-client -q 'create database logs;'"
      register: create_db # регистрируем результат
      failed_when: create_db.rc != 0 and create_db.rc !=82 # условия, при которых задача завершается с ошибкой
      changed_when: create_db.rc == 0 # условия при которых задача считается измененной
      tags: # Тэги
        - clickhouse # Название тега